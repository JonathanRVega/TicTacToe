{"version":3,"sources":["Square.js","App.js","serviceWorker.js","index.js"],"names":["style","backgroundColor","border","textAlign","fontSize","width","height","margin","display","verticalAlign","Square","onClick","this","props","handleClick","value","Component","App","state","board","turn","winningConditions","i","length","a","b","c","isBoardFull","slice","setState","playerWon","updateBoard","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9061f3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst style = {\r\n    backgroundColor: \"white\",\r\n    border: \"black solid 2px\",\r\n    textAlign: \"center\",\r\n    fontSize: \"20px\",\r\n    width: \"40px\",\r\n    height: \"40px\",\r\n    margin: -1,\r\n    display: \"inline-block\",\r\n    verticalAlign: \"top\",\r\n}\r\n \r\n\r\n\r\nexport default class Square extends Component {\r\n\r\n    render(){\r\n    return <div style={style} onClick={this.props.handleClick}>{this.props.value}</div>\r\n        \r\n    }\r\n}","import React, { Component } from 'react';\nimport Square from './Square';\n\n\nclass App extends Component {\n  state = {\n    board: [\"\", \"\", \"\",\n            \"\", \"\",\"\",\n            \"\", \"\", \"\"],\n  turn: 'X'\n\n  }\n\n  playerWon(){\n    const board = this.state.board;\n    const winningConditions = [ \n      [0,1,2], \n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6],\n    ];\n    for(let i=0; i<winningConditions.length; i++){\n      const [a,b,c] = winningConditions[i];\n        if(board[a] !== '' && board[a]===board[b] && board[b]===board[c]){\n          return board[a];\n        }\n      }\n      let isBoardFull = true;\n      for(let i=0; i<board.length; i++){\n        if(board[i]===''){\n          isBoardFull = false;\n          break;\n        }\n      }\n\n      if(!isBoardFull){\n        return '';\n      }\n        else{\n          return 'tie';\n        }\n      }\n  \n\n\n  updateBoard(i){\n    let board = this.state.board.slice();\n    let turn = this.state.turn;\n\n    if(board[i]==''){\n      board[i] = turn;\n      turn = turn === '0' ? 'X' : '0';\n    }\n    this.setState({\n      board,\n      turn,\n    })\n\n  \n  }\n\nrender(){\n  return (\n    <div>\n      <h1>{this.playerWon()}</h1>\n      <div><Square value={this.state.board[0]} handleClick={this.updateBoard.bind(this, 0)}/><Square value={this.state.board[1]} handleClick={this.updateBoard.bind(this, 1)}/><Square value={this.state.board[2]} handleClick={this.updateBoard.bind(this, 2)}/></div>\n      <div><Square value={this.state.board[3]} handleClick={this.updateBoard.bind(this, 3)}/><Square value={this.state.board[4]} handleClick={this.updateBoard.bind(this, 4)}/><Square value={this.state.board[5]} handleClick={this.updateBoard.bind(this, 5)}/></div>\n      <div><Square value={this.state.board[6]} handleClick={this.updateBoard.bind(this, 6)}/><Square value={this.state.board[7]} handleClick={this.updateBoard.bind(this, 7)}/><Square value={this.state.board[8]} handleClick={this.updateBoard.bind(this, 8)}/></div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}